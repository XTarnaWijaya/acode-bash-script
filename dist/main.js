/*! Acode Bash Script Pro v2.0 | (c) 2024 | MIT License */
ace.define("ace/theme/bash_theme",["require","exports","module"],(function(e,t,n){"use strict";t.isDark=!1,t.cssClass="bash-theme",t.cssText='.bash-theme .ace_gutter{background:#f8f9fa;color:#6c757d}.bash-theme .ace_print-margin{width:1px;background:#e9ecef}.bash-theme{background:#fff;color:#212529}.ace-bash .ace_keyword{color:#007bff;font-weight:700}.ace-bash .ace_variable{color:#e36209}.ace-bash .ace_string{color:#28a745}.ace-bash .ace_comment{color:#6c757d;font-style:italic}.ace-bash .ace_function{color:#6610f2}.ace-bash .ace_operator{color:#6f42c1}'}));

ace.define("ace/mode/bash_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/text_highlight_rules"],(function(e,t,n){"use strict";var r=e("ace/lib/oop"),i=e("ace/mode/text_highlight_rules").TextHighlightRules,o=function(){var e="(\\$\\{|\\$|\\b)([a-zA-Z_][a-zA-Z0-9_]*\\b)",t="\\b(if|then|else|elif|fi|for|in|do|done|while|until|case|esac|function|select|break|continue|return|exit|echo|printf|read|test|declare|local|export|alias|source|\\.)\\b",n={token:"variable.language",regex:/\$(?:HOME|PATH|PWD|USER|SHELL|HOSTNAME|RANDOM|UID|PPID)/},r={token:"string",regex:/"/,push:[{token:"string",regex:/"/,next:"pop"},{defaultToken:"string"}]},i={token:"string",regex:/'/,push:[{token:"string",regex:/'/,next:"pop"},{defaultToken:"string"}]},o={token:"constant.numeric",regex:/\b[0-9]+\b/},s={token:"comment",regex:/#.*$/},a={token:"keyword.operator",regex:/\|\||&&|>>|<<|[><!]=?|==|\+=|-=|\+|-|=|\*|\/|%/},c={token:"punctuation.operator",regex:/[{}()\[\];`]/},l={token:"text",regex:/\s+/},u={token:"function",regex:/\b([a-zA-Z_][a-zA-Z0-9_]*)\s*\(\)/},d={token:"storage.function",regex:/\bfunction\s+[a-zA-Z_][a-zA-Z0-9_]*/},f={token:["text","keyword"],regex:/(^\s*)(case|esac)/},m={token:"entity.name.function",regex:/\b(?:alias|declare|export|local|readonly)\s+([a-zA-Z_][a-zA-Z0-9_]*)/},p={regex:e,token:function(e,t,n){return n[1]?"variable.language":"variable"}};this.$rules={start:[n,r,i,o,s,a,c,l,u,d,f,m,p,{token:"keyword",regex:t}]}};r.inherits(o,i),t.BashHighlightRules=o}));

ace.define("ace/mode/bash",["require","exports","module","ace/lib/oop","ace/mode/text","ace/mode/bash_highlight_rules"],(function(e,t,n){"use strict";var r=e("ace/lib/oop"),i=e("ace/mode/text").Mode,o=e("ace/mode/bash_highlight_rules").BashHighlightRules,s=function(){this.HighlightRules=o,this.$behaviour=this.$defaultBehaviour};r.inherits(s,i),function(){this.lineCommentStart="#",this.blockComment=null,this.$id="ace/mode/bash"}.call(s.prototype),t.Mode=s}));

ace.define("ace/snippets/bash",["require","exports","module"],(function(e,t,n){"use strict";t.snippetText='# Main constructs\nsnippet if\n\tif [[ ${1:condition} ]]; then\n\t\t${2}\n\tfi\n\nsnippet for\n\tfor ${1:var} in ${2:list}; do\n\t\t${3}\n\tdone\n\nsnippet while\n\twhile ${1:condition}; do\n\t\t${2}\n\tdone\n\nsnippet case\n\tcase ${1:word} in\n\t\t${2:pattern})\n\t\t\t${3};;\n\tesac\n\n# Functions\nsnippet fn\n\tfunction ${1:name}() {\n\t\t${2}\n\t}\n\n# I/O Redirection\nsnippet redirect\n\t${1:command} > ${2:file} 2>&1\n\n# Error Handling\nsnippet trap\n\ttrap "${1:cleanup}" EXIT ERR SIGINT\n\n# Common Commands\nsnippet curl\n\tcurl -sSL ${1:url}\n\nsnippet grep\n\tgrep -E "${1:pattern}" ${2:file}\n\nsnippet awk\n\tawk \'${1:pattern} { ${2:action} }\' ${3:file}\n\nsnippet sed\n\tsed -E \'${1:command}\' ${2:file}\n',t.scope="bash"}));

class BashTerminal {
    constructor(){this.history=[],this.historyIndex=0}
        init(){this.container=document.createElement("div"),this.container.style.cssText="position:fixed;bottom:0;left:0;right:0;height:250px;background:#1e1e1e;color:#fff;z-index:1000;font-family:monospace;",this.output=document.createElement("div"),this.output.style.cssText="height:calc(100% - 30px);overflow-y:auto;padding:10px;white-space:pre-wrap;",this.input=document.createElement("input"),this.input.style.cssText="width:calc(100% - 20px);margin:5px;padding:5px;background:#333;color:#fff;border:1px solid #555;",this.container.append(this.output,this.input),document.body.appendChild(this.container),this.input.addEventListener("keydown",e=>this.handleKey(e))}
            async execute(e){try{let t=await window.Android?window.Android.execCommand(e):`# ${e}\n[WEB TERMINAL] Command execution available on Android`;return this.print(`$ ${e}\n${t}`),t}catch(t){return this.print(`$ ${e}\nError: ${t.message}`),""}}
                print(e){this.output.innerHTML+=e+"\n",this.output.scrollTop=this.output.scrollHeight}
                    handleKey(e){13===e.keyCode?(e.preventDefault(),this.execute(this.input.value),this.input.value=""):38===e.keyCode?this.showHistoryPrev():40===e.keyCode&&this.showHistoryNext()}
                        showHistoryPrev(){this.historyIndex>0&&(this.input.value=this.history[--this.historyIndex])}
                            showHistoryNext(){this.historyIndex<this.history.length-1?this.input.value=this.history[++this.historyIndex]:this.historyIndex=this.history.length}
                            }

                            class BashLinter {
                                lint(e){let t=[];return e.split("\n").forEach((e,n)=>{if(e.match(/^\s*if\s*\[/)&&!e.includes("]"))t.push({row:n,column:e.indexOf("if"),text:"Missing closing bracket in test expression",type:"error"});if(e.match(/^\s*for\s+\w+\s+in/)&&!e.match(/;\s*do/))t.push({row:n,column:e.indexOf("for"),text:"Missing 'do' in for loop",type:"error"});if(e.match(/^\s*function\s+\w+\(\)/))t.push({row:n,column:0,text:"Deprecated function syntax - use 'func_name()' instead",type:"warning"})}),t}
                                }

                                class BashCompleter {
                                    getCompletions(e,t,n,r,i){const o=["if","then","else","elif","fi","for","while","do","done","case","esac","function","select","break","continue","return","exit"],s=["ls","cd","grep","awk","sed","curl","wget","cat","echo","printf","test","read","declare","export","source","alias"],a=["PATH","HOME","USER","PWD","SHELL","RANDOM","UID"],c=o.map(e=>({value:e,meta:"keyword",score:1000})).concat(s.map(e=>({value:e,meta:"command",score:900}))).concat(a.map(e=>({value:"$"+e,meta:"variable",score:800})));i(null,c)}
                                    }

                                    class AcodeBashPlugin {
                                        constructor(){this.terminal=new BashTerminal,this.linter=new BashLinter,this.completer=new BashCompleter}
                                            async init(){this.terminal.init(),this.registerSyntax(),this.registerSnippets(),this.registerAutocomplete(),this.setupUI(),this.setupFileHandlers()}
                                                registerSyntax(){ace.config.setModuleUrl("ace/mode/bash_highlight_rules","data:,"),ace.config.setModuleUrl("ace/mode/bash","data:,"),ace.config.setModuleUrl("ace/theme/bash_theme","data:,")}
                                                    registerSnippets(){ace.config.loadModule("ace/snippets/bash",(e=>{e.snippetText=ace.require("ace/snippets/bash").snippetText}))}
                                                        registerAutocomplete(){ace.config.loadModule("ace/ext/language_tools",(e=>{e.addCompleter(this.completer)}))}
                                                            setupUI(){acode.addButton("🚀","Run Script",async()=>{const e=acode.getActiveEditor();if(e.file.name.endsWith(".sh")){const t=await this.terminal.execute(`bash "${e.file.path}"`);acode.alert("Execution Result",t)}}),acode.addButton("📋","New Terminal",()=>this.terminal.container.style.display="block"),acode.addButton("🔍","Lint Script",()=>{const e=acode.getActiveEditor(),t=this.linter.lint(e.getValue());e.session.setAnnotations(t)})}
                                                                setupFileHandlers(){ace.config.loadModule("ace/ext/modelist",(e=>{e.addMode({name:"Bash",mode:"ace/mode/bash",extensions:["sh","bash","zsh","profile","bashrc","bash_profile"],file:/\/(bin|usr\/local\/bin|etc\/profile\.d)/})}))}
                                                                    onEditorChange(e){e.file.name.match(/\.(sh|bash|zsh)$/i)&&(e.session.setMode("ace/mode/bash"),e.session.setUseSoftTabs(!0),e.session.setTabSize(2),e.setTheme("ace/theme/bash_theme"))}
                                                                    }

                                                                    return new AcodeBashPlugin;